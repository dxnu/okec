{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HomepageOKEC(a.k.a. EdgeSim++)","text":"<p> A Realistic, Versatile, and Easily Customizable Edge Computing Simulator </p> <p> </p> <p>Welcome to the OKEC (a.k.a EdgeSim++) homepage, a realistic, versatile, and easily customizable edge computing simulator.</p>"},{"location":"Installation/","title":"Installation","text":""},{"location":"Installation/#prerequisites","title":"Prerequisites","text":"Library Version Compiler Version Language Version NS-3 3.41 GCC 13.0 above C++ 23 above libtorch cxx11 ABI Clang N/A nlohmann_json N/A MSVC 19.34 above matplotlib-cpp N/A"},{"location":"Installation/#install","title":"Install","text":"<pre><code>$ git clone https://github.com/lkimuk/okec.git\n$ cd okec\n$ cmake -S . -B build -DCMAKE_PREFIX_PATH:STRING=/absolute/path/to/your/libtorch\n$ cmake --build build\n$ cmake --install ./build\n</code></pre> <p>If your prerequisite libraries are not installed in standard directories, you may need to specify multiple paths as follows:</p> <pre><code>$ git clone https://github.com/lkimuk/okec.git\n$ cd okec\n$ cmake -S . -B build -DCMAKE_PREFIX_PATH:STRING=\"/absolute/path/to/your/libtorch;/absolute/path/to/your/other/libraries\"\n$ cmake --build build\n$ cmake --install ./build\n</code></pre>"},{"location":"Installation/#run-examples","title":"Run examples","text":"<pre><code>$ cd examples\n$ cmake -S . -B build\n$ cmake --build build\n$ ./wf-async\n$ ./wf_discrete\n$ ./wf_net\n$ ./rf_discrete\n</code></pre>"},{"location":"misc/","title":"Miscellaneous","text":""},{"location":"page2/","title":"Summary","text":"Members Descriptions <code>namespace</code><code>transport</code>"},{"location":"page2/#namespace-transport","title":"namespace <code>transport</code>","text":""},{"location":"page2/#summary_1","title":"Summary","text":"Members Descriptions <code>class</code><code>transport::Bicycle</code> Standard bicycle class. <code>class</code><code>transport::MountainBike</code> Mountain bike implementation of a <code>[Bicycle](#classtransport_1_1Bicycle)</code>. <code>class</code><code>transport::RacingBike</code> Racing bike class."},{"location":"page2/#class-transportbicycle","title":"class <code>transport::Bicycle</code>","text":"<p>Standard bicycle class.</p> <p>Bicycle implements a standard bicycle. Bicycles are a useful way of transporting oneself, without too much effort (unless you go uphill or against the wind). If there are a lot of people on the road, you can use <code>RingBell</code> to ring your bell (note, not all bicycles have bells!).</p>"},{"location":"page2/#summary_2","title":"Summary","text":"Members Descriptions <code>public virtual void</code><code>PedalHarder</code><code>()</code> PedalHarder makes you go faster (usually). <code>public virtual void</code><code>RingBell</code><code>()</code> Ring bell on the bike. <code>public virtual</code><code>~Bicycle</code><code>()</code> Default destructor."},{"location":"page2/#members","title":"Members","text":""},{"location":"page2/#public-virtual-voidpedalharder","title":"<code>public virtual void</code><code>PedalHarder</code><code>()</code>","text":"<p>PedalHarder makes you go faster (usually).</p>"},{"location":"page2/#public-virtual-voidringbell","title":"<code>public virtual void</code><code>RingBell</code><code>()</code>","text":"<p>Ring bell on the bike.</p> <p>RingBell rings the bell on the bike. Note that not all bikes have bells.</p>"},{"location":"page2/#public-virtualbicycle","title":"<code>public virtual</code><code>~Bicycle</code><code>()</code>","text":"<p>Default destructor.</p>"},{"location":"page2/#class-transportmountainbike","title":"class <code>transport::MountainBike</code>","text":"<pre><code>class transport::MountainBike\n  : public transport::Bicycle\n</code></pre> <p>Mountain bike implementation of a <code>[Bicycle](#classtransport_1_1Bicycle)</code>.</p> <p>MountainBike is an implementation of a Bicycle providing a bike for cycling on rough terrain. Mountain bikes are pretty cool because they have stuff like Suspension (and you can even adjust it using SetSuspension). If you're looking for a bike for use on the road, you might be better off using a RacingBike though.</p>"},{"location":"page2/#summary_3","title":"Summary","text":"Members Descriptions <code>public bool</code><code>SetSuspension</code><code>(double stiffness)</code> Set suspension stiffness. @stiffness the suspension stiffness. <code>public template&lt;&gt;</code> <code>inline bool</code><code>ChangeBreak</code><code>(BreakType breakType)</code> Change the break type. @BreakType the break type. @breakType the type of the break."},{"location":"page2/#members_1","title":"Members","text":""},{"location":"page2/#public-boolsetsuspensiondouble-stiffness","title":"<code>public bool</code><code>SetSuspension</code><code>(double stiffness)</code>","text":"<p>Set suspension stiffness. @stiffness the suspension stiffness.</p> <p>SetSuspension changes the stiffness of the suspension on the bike. The method will return false if the stiffness could not be adjusted.</p>"},{"location":"page2/#returns","title":"Returns","text":"<p>true if the suspension was adjusted successfully, false otherwise.</p>"},{"location":"page2/#public-template-inline-boolchangebreakbreaktype-breaktype","title":"<code>public template&lt;&gt;</code> <code>inline bool</code><code>ChangeBreak</code><code>(BreakType breakType)</code>","text":"<p>Change the break type. @BreakType the break type. @breakType the type of the break.</p> <p>ChangesBreak changes the type of break fitted to the bike. The method will return false if the break type could not be fitted.</p>"},{"location":"page2/#returns_1","title":"Returns","text":"<p>true if the break was adjusted successfully. false otherise</p>"},{"location":"page2/#class-transportracingbike","title":"class <code>transport::RacingBike</code>","text":"<pre><code>class transport::RacingBike\n  : public transport::Bicycle\n</code></pre> <p>Racing bike class.</p> <p>RacingBike is a special kind of bike which can go much faster on the road, with much less effort (even uphill!). It doesn't make sense to call <code>RingBell</code> on a racing bike for they don't have bells.</p>"},{"location":"page2/#summary_4","title":"Summary","text":"Members Descriptions <code>public virtual void</code><code>PedalHarder</code><code>()</code> PedalHarder makes you go faster (usually). <code>public virtual void</code><code>RingBell</code><code>()</code> Ring bell on the bike."},{"location":"page2/#members_2","title":"Members","text":""},{"location":"page2/#public-virtual-voidpedalharder_1","title":"<code>public virtual void</code><code>PedalHarder</code><code>()</code>","text":"<p>PedalHarder makes you go faster (usually).</p>"},{"location":"page2/#public-virtual-voidringbell_1","title":"<code>public virtual void</code><code>RingBell</code><code>()</code>","text":"<p>Ring bell on the bike.</p> <p>RingBell rings the bell on the bike. Note that not all bikes have bells.</p> <p>Generated by Moxygen</p>"},{"location":"algorithms/decision-engines/","title":"Decision Engines","text":""},{"location":"algorithms/decision-engines/#wf_decision_engine","title":"WF_decision_engine","text":"<p>A decision engine implements the Worst-Fit algorithm.</p>"},{"location":"algorithms/decision-engines/#examples","title":"Examples","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nokec::awaitable offloading(auto user, okec::task t) {\n    olog::debug(\"offloading begin\");\n\n    co_await user-&gt;async_send(std::move(t));\n    auto resp = co_await user-&gt;async_read();\n    olog::success(\"received response.\");\n\n    okec::print(\"{:r}\", resp);\n}\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::WF_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Offload tasks\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    auto user1 = user_devices.get_device(0);\n    co_spawn(sim, offloading(user1, t));\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>The output would be:</p> <p></p>"},{"location":"algorithms/decision-engines/#dqn_decision_engine","title":"DQN_decision_engine","text":"<p>A decision engine implements the Deep Q-Network (DQN) algorithm.</p>"},{"location":"algorithms/decision-engines/#examples_1","title":"Examples","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::DQN_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Discretely offload the task using the DQN decision engine.\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    int episode = 5;\n    decision_engine-&gt;train(t, episode);\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>The output would be:</p> <p></p>"},{"location":"algorithms/decision-engines/#cloud_edge_end_default_decision_engine","title":"cloud_edge_end_default_decision_engine","text":"<p>A decision engine that implements the Worst-Fit algorithm for cloud-edge-end scenarios</p>"},{"location":"network/network-models/","title":"Network Models","text":""},{"location":"network/network-models/#single_ap_clients_model","title":"single_ap_clients_model","text":"<p>The model sets up scenarios with a single base station serving clients from the same network segments.</p> <p></p>"},{"location":"network/network-models/#multiple_aps_clients_model","title":"multiple_aps_clients_model","text":"<p>The model sets up scenarios with multiple base stations serving clients from different network segments.</p> <p></p>"},{"location":"network/network-models/#cloud_edge_end_model","title":"cloud_edge_end_model","text":"<p>The model constructs a cloud-edge-end scenario that includes multiple user devices, base stations, edge servers, and a cloud server.</p> <p></p>"},{"location":"network/network-models/#simple_edge_model","title":"simple_edge_model","text":"<p>The model constructs a simple, pure edge computing scenario that includes user devices and several edge servers.</p>"},{"location":"okec/components/common/simulation-time/","title":"Simulation time","text":"<p>Defined in header <code>&lt;okec/common/simulator.h&gt;</code> Defined in namespace okec::now</p> years returns a year in the simulation time(function) days returns a day of a month in the simulation time(function) hours returns an hour of a day in the simulation time(function) minutes returns a minute in the simulation time(function) seconds returns a second in the simulation time(function) milli_seconds returns a millisecond in the simulation time(function) micro_seconds returns a microsecond in the simulation time(function) nano_seconds returns a nanosecond in the simulation time(function) pico_seconds returns a picosecond in the simulation time(function) femto_seconds returns a femtosecond in the simulation time(function)"},{"location":"okec/components/common/simulation-time/#functions","title":"Functions","text":""},{"location":"okec/components/common/simulation-time/#years","title":"years","text":"<pre><code>inline auto years() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#days","title":"days","text":"<pre><code>inline auto days() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#hours","title":"hours","text":"<pre><code>inline auto hours() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#minutes","title":"minutes","text":"<pre><code>inline auto minutes() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#seconds","title":"seconds","text":"<pre><code>inline auto seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#milli_seconds","title":"milli_seconds","text":"<pre><code>inline auto milli_seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#micro_seconds","title":"micro_seconds","text":"<pre><code>inline auto micro_seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#nano_seconds","title":"nano_seconds","text":"<pre><code>inline auto nano_seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#pico_seconds","title":"pico_seconds","text":"<pre><code>inline auto pico_seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#femto_seconds","title":"femto_seconds","text":"<pre><code>inline auto femto_seconds() -&gt; double;\n</code></pre>"},{"location":"okec/components/common/simulation-time/#example","title":"Example","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\n\nint main() {\n    okec::print(\"years: {}\\n\", okec::now::years());\n    okec::print(\"days: {}\\n\", okec::now::days());\n    okec::print(\"hours: {}\\n\", okec::now::hours());\n    okec::print(\"minutes: {}\\n\", okec::now::minutes());\n    okec::print(\"seconds: {}\\n\", okec::now::seconds());\n    okec::print(\"milli_seconds: {}\\n\", okec::now::milli_seconds());\n    okec::print(\"micro_seconds: {}\\n\", okec::now::micro_seconds());\n    okec::print(\"nano_seconds: {}\\n\", okec::now::nano_seconds());\n    okec::print(\"pico_seconds: {}\\n\", okec::now::pico_seconds());\n    okec::print(\"femto_seconds: {}\\n\", okec::now::femto_seconds());\n}\n</code></pre> <p>Output: <pre><code>years: 0\ndays: 0\nhours: 0\nminutes: 0\nseconds: 0\nmilli_seconds: 0\nmicro_seconds: 0\nnano_seconds: 0\npico_seconds: 0\nfemto_seconds: 0\n</code></pre></p>"},{"location":"okec/components/common/simulator/","title":"okec::simulator","text":"<p>Defined in header <code>&lt;okec/common/simulator.h&gt;</code> Defined in namespace okec</p> <pre><code>class simulator {};\n</code></pre>"},{"location":"okec/components/common/simulator/#member-functions","title":"Member functions","text":"(constructor) constructs a new simulator(public member function) (destructor) destructs the simulator(public member function) run runs the simulator(public member function) stop_time (getter) gets the stop time of the simulator(public member function) stop_time (setter) sets the stop time of the simulator(public member function) submit sets the coroutine resume function(public member function) complete invokes the resume function when the response is arrived(public member function) is_valid checks if the ip address has a resume function(public member function) hold_coro holds a awaitable object in case it destroyed(public member function)"},{"location":"okec/components/common/simulator/#stop_time-setter","title":"stop_time setter","text":"<pre><code>auto stop_time() const -&gt; ns3::Time;\n</code></pre>"},{"location":"okec/components/common/simulator/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/#example","title":"Example","text":""},{"location":"okec/components/common/task/","title":"okec::task","text":"<p>Defined in header <code>&lt;okec/common/task.h&gt;</code> Defined in namespace okec</p> <pre><code>class task : public ns3::SimpleRefCount&lt;task&gt; {};\n</code></pre>"},{"location":"okec/components/common/task/#member-types","title":"Member types","text":"Member type Definition attribute_t(private) <code>std::pair&lt;std::string, std::string&gt;</code> attributes_t(private) <code>std::initializer_list&lt;attribute_t&gt;</code> task_header(public) <code>attributes_t</code> task_body(public) <code>attributes_t</code>"},{"location":"okec/components/common/task/#member-functions","title":"Member functions","text":"(constructor) constructs a task object(public member function) (destructor)(implicitly declared) destructs a task(public member function) from_packet constructs a task object from a packet(public static member function) from_msg_packet constructs a task object from a message packet.(public static member function) emplace_back insert a new task into the task object(public member function) dump dump the task into a string(public member function) elements_view accesses the task elements through views(public member function) elements safely accesses the task elements through a copy(public member function) at retrieve the task element at the specified index(public member function) data gets the task data(public member function) j_data <code>data</code> returns only the task elements, whereas <code>j_data</code> returns the original JSON data of the task(public member function) is_null checks if the task is null(public member function) size the size of the task(public member function) empty checks if the task is empty(public member function) set_if if the attributes of the task meet the specified criteria, set the task information(public member function) unique_id generates a unique task id(public member function) save_to_file saves task to a file(public member function) load_from_file loads task from a file(public member function)"},{"location":"okec/components/common/task/#tasktask","title":"task::task","text":"<code>task() = default;</code> (1) <code>task(json other);</code> (2) <p>Constructs a task object.</p> <ul> <li>1) default constructor.</li> <li>2) Constructs a task object from a valid json file.</li> </ul>"},{"location":"okec/components/common/task/#parameters","title":"Parameters","text":"<ul> <li>other: a valid json file to copy from</li> </ul>"},{"location":"okec/components/common/task/#taskfrom_packet","title":"task::from_packet","text":"<code>static auto from_packet(ns3::Ptr&lt;ns3::Packet&gt; packet) -&gt; task;</code> <p>Constructs a task object from a ns3 packet.</p>"},{"location":"okec/components/common/task/#parameters_1","title":"Parameters","text":"<ul> <li>packet: a valid task packet</li> </ul>"},{"location":"okec/components/common/task/#return-value","title":"Return value","text":"<p>A task object that contains some tasks.</p>"},{"location":"okec/components/common/task/#taskfrom_msg_packet","title":"task::from_msg_packet","text":"<code>auto task::from_msg_packet(ns3::Ptr&lt;ns3::Packet&gt; packet) -&gt; task</code> <p>Constructs a task object from a message packet.</p>"},{"location":"okec/components/common/task/#parameters_2","title":"Parameters","text":"<ul> <li>packet: a valid task packet with a message wrapper</li> </ul>"},{"location":"okec/components/common/task/#return-value_1","title":"Return value","text":"<p>A task object that contains some tasks.</p>"},{"location":"okec/components/common/task/#taskemplace_back","title":"task::emplace_back","text":"<code>auto emplace_back(task_header_t header_attrs, task_body_t body_attrs = {}) -&gt; void;</code> <p>Insert a new task into the task object. </p>"},{"location":"okec/components/common/task/#parameters_3","title":"Parameters","text":"<ul> <li>header_attrs: task header attributes</li> <li>body_attrs: task body attributes</li> </ul>"},{"location":"okec/components/common/task/#taskdump","title":"task::dump","text":"<code>auto dump(int indent = -1) const -&gt; std::string;</code> <p>Dump the task into a string.</p>"},{"location":"okec/components/common/task/#parameters_4","title":"Parameters","text":"<ul> <li>indent: the indentation level of the exported content</li> </ul>"},{"location":"okec/components/common/task/#return-value_2","title":"Return value","text":"<p>A string containing task information in JSON format.</p>"},{"location":"okec/components/common/task/#taskelements_view","title":"task::elements_view","text":"<code>auto elements_view() -&gt; std::vector&lt;task_element&gt;;</code> <p>Accesses the task elements through views.</p>"},{"location":"okec/components/common/task/#return-value_3","title":"Return value","text":"<p>A list of element views for accessing and modifying task information.</p>"},{"location":"okec/components/common/task/#taskelements","title":"task::elements","text":"<code>auto elements() const -&gt; std::vector&lt;task_element&gt;;</code> <p>Safely accesses the task elements through a copy.</p>"},{"location":"okec/components/common/task/#return-value_4","title":"Return value","text":"<p>A list of task elements for accessing task information.</p>"},{"location":"okec/components/common/task/#taskat","title":"task::at","text":"<code>auto at(std::size_t index) noexcept -&gt; task_element;</code> <p>Retrieve the task element at the specified index.</p>"},{"location":"okec/components/common/task/#parameters_5","title":"Parameters","text":"<ul> <li>index: The index of the task element to retrieve</li> </ul>"},{"location":"okec/components/common/task/#return-value_5","title":"Return value","text":"<p>The task element located at the given index.</p>"},{"location":"okec/components/common/task/#taskdata","title":"task::data","text":"<code>auto data() const -&gt; json;</code> <p>Gets the task data.</p>"},{"location":"okec/components/common/task/#return-value_6","title":"Return value","text":"<p>Task data formatted in JSON.</p>"},{"location":"okec/components/common/task/#taskj_data","title":"task::j_data","text":"<code>auto j_data() const -&gt; json;</code> <p><code>task::data</code> returns only the task elements, whereas <code>task::j_data</code> returns the original JSON data of the task.</p>"},{"location":"okec/components/common/task/#taskis_null","title":"task::is_null","text":"<code>auto is_null() const -&gt; bool;</code> <p>Checks if the task is null.</p>"},{"location":"okec/components/common/task/#tasksize","title":"task::size","text":"<code>auto size() const -&gt; std::size_t;</code> <p>The size of the task.</p>"},{"location":"okec/components/common/task/#taskempty","title":"task::empty","text":"<code>auto empty() -&gt; bool;</code> <p>Checks if the task is empty.</p>"},{"location":"okec/components/common/task/#taskset_if","title":"task::set_if","text":"<code>auto set_if(attributes_t values, auto f) -&gt; void;</code> <p>If the attributes of the task meet the specified criteria, set the task information.</p>"},{"location":"okec/components/common/task/#taskunique_id","title":"task::unique_id","text":"<code>static auto unique_id() -&gt; std::string;</code> <p>Generates a unique task id.</p>"},{"location":"okec/components/common/task/#tasksave_to_file","title":"task::save_to_file","text":"<code>auto save_to_file(const std::string&amp; file_name) -&gt; void;</code>"},{"location":"okec/components/common/task/#taskload_from_file","title":"task::load_from_file","text":"<code>auto load_from_file(const std::string&amp; file_name) -&gt; bool;</code>"},{"location":"okec/components/common/task/#example","title":"Example","text":""},{"location":"okec/components/common/task/#generate-tasks-randomly","title":"Generate tasks randomly","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    okec::print(\"{:t}\", t);\n}\n</code></pre> <p>Output:</p> <pre><code>[ 1] cpu: 1.02 deadline: 3 group: dummy task_id: CC5855F2FB5922492B34F37B994CD5D\n[ 2] cpu: 1.14 deadline: 4 group: dummy task_id: 13E009115B674D4A50DD60CE847DFC2\n[ 3] cpu: 0.76 deadline: 4 group: dummy task_id: 1F276AAFF89D17AAE219E987DA7998A\n[ 4] cpu: 0.34 deadline: 1 group: dummy task_id: 5D3DDEB066A080C9AC3A9B9DF752A91\n[ 5] cpu: 0.81 deadline: 2 group: dummy task_id: 3FC95B4E167FEF99957143D35D21463\n[ 6] cpu: 1.00 deadline: 4 group: dummy task_id: 82D8F41470CD15DB51D28E1D3A859AF\n[ 7] cpu: 1.03 deadline: 3 group: dummy task_id: 4273D1952CB9B0099D36904978E9B28\n[ 8] cpu: 0.74 deadline: 3 group: dummy task_id: 8A201C54390FD95BA6A467F1426048B\n[ 9] cpu: 0.29 deadline: 3 group: dummy task_id: F3FD22F2A9196DE93915ACEF0A612FA\n[10] cpu: 0.52 deadline: 4 group: dummy task_id: 072EA1D4AB870B2B15ABCC5DE036FBE\n</code></pre>"},{"location":"okec/components/common/task/#save-tasks-and-load-them-from-files","title":"Save tasks and Load them from files","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t1;\n    generate_task(t1, 5, \"dummy\");\n    t1.save_to_file(\"task.json\");\n\n    okec::task t2;\n    t2.load_from_file(\"task.json\");\n\n    okec::print(\"t1:\\n{:t}\\n\", t1);\n    okec::print(\"t2:\\n{:t}\", t2);\n}\n</code></pre> <p>Output: <pre><code>t1:\n[1] cpu: 0.94 deadline: 3 group: dummy task_id: C8487480083EF6FA51A07F6786112B2\n[2] cpu: 0.87 deadline: 3 group: dummy task_id: AA6E00D9D1D676999810EC793D4091F\n[3] cpu: 0.70 deadline: 3 group: dummy task_id: D7C9B93D88725A6B0A7F24C8D5576E9\n[4] cpu: 0.27 deadline: 4 group: dummy task_id: D8A72C409FC97BD9B8C6478CD69D23A\n[5] cpu: 0.30 deadline: 3 group: dummy task_id: 05019AFC1C46E9581755D2B819B5092\n\nt2:\n[1] cpu: 0.94 deadline: 3 group: dummy task_id: C8487480083EF6FA51A07F6786112B2\n[2] cpu: 0.87 deadline: 3 group: dummy task_id: AA6E00D9D1D676999810EC793D4091F\n[3] cpu: 0.70 deadline: 3 group: dummy task_id: D7C9B93D88725A6B0A7F24C8D5576E9\n[4] cpu: 0.27 deadline: 4 group: dummy task_id: D8A72C409FC97BD9B8C6478CD69D23A\n[5] cpu: 0.30 deadline: 3 group: dummy task_id: 05019AFC1C46E9581755D2B819B5092\n</code></pre></p>"},{"location":"okec/components/common/task/#iterate-through-tasks","title":"Iterate through tasks","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    for (auto const&amp; item : t.elements())\n    {\n        okec::print(\"task_id: {} \", item.get_header(\"task_id\"));\n        okec::print(\"group: {} \", item.get_header(\"group\"));\n        okec::print(\"cpu: {} \", item.get_header(\"cpu\"));\n        okec::print(\"deadline: {}\\n\", item.get_header(\"deadline\"));\n    }\n}\n</code></pre> <p>Output: <pre><code>task_id: E99E1850C94F616A2E7A2F01FEA4F43 group: dummy cpu: 1.15 deadline: 4\ntask_id: 2E54F007DCA13C89621C9D554F7203B group: dummy cpu: 1.05 deadline: 4\ntask_id: B430A892935CE16A2DD458A0E73013E group: dummy cpu: 0.46 deadline: 4\ntask_id: 8FEE0B90F2ABF3280B573C1517CF487 group: dummy cpu: 0.83 deadline: 2\ntask_id: CFAF12948696F9AA25D2EA45D99F3CC group: dummy cpu: 0.87 deadline: 4\ntask_id: B89CF926127909C91641670DCF59E16 group: dummy cpu: 0.87 deadline: 1\ntask_id: A75B4F6C8828E7B98550FA8E59232FB group: dummy cpu: 0.24 deadline: 1\ntask_id: A838D2B4E534D9E8556B7F5228A5F0D group: dummy cpu: 0.65 deadline: 4\ntask_id: 42CC12E43AEF2E9AC50C47E675050C1 group: dummy cpu: 0.77 deadline: 4\ntask_id: 5BEE99DFF8F012C9FB10DA9E81C5DF9 group: dummy cpu: 0.76 deadline: 3\n</code></pre></p>"},{"location":"okec/components/common/task/#append-attributes-to-tasks-and-modify-the-task-attribute-values","title":"Append attributes to tasks and modify the task attribute values","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    okec::print(\"Before:\\n{:t}\\n\", t);\n\n    for (auto&amp; item : t.elements_view())\n    {\n        item.set_header(\"memory\", okec::rand_range(10.0, 100.0).to_string());\n    }\n\n    t.at(2).set_header(\"deadline\", \"20\");\n\n    okec::print(\"After:\\n{:t}\", t);\n}\n</code></pre> <p>Output: <pre><code>Before:\n[ 1] cpu: 0.91 deadline: 2 group: dummy task_id: D759A6B6161BCE3B25C7AC79064D082\n[ 2] cpu: 0.36 deadline: 1 group: dummy task_id: F058239672AD6108DF9CFBDA74B5628\n[ 3] cpu: 0.27 deadline: 2 group: dummy task_id: 109DC14559C70AB880E2AE44588E2B6\n[ 4] cpu: 1.05 deadline: 2 group: dummy task_id: 1D55F6D4EC004FBB0D449EF3FC325A2\n[ 5] cpu: 0.45 deadline: 4 group: dummy task_id: 5FC152A187472BCB51FEC24C1B34808\n[ 6] cpu: 1.03 deadline: 4 group: dummy task_id: 3811B94C6FB3E20817FA648746EEFB7\n[ 7] cpu: 0.43 deadline: 4 group: dummy task_id: 009A7DA8A7E0643B84391C790D0562B\n[ 8] cpu: 0.74 deadline: 2 group: dummy task_id: 486E9DD50B5AE6BA4DB76CB6CCAD057\n[ 9] cpu: 0.93 deadline: 3 group: dummy task_id: 770DE1C994C61ACBAAF8C708C0A90D8\n[10] cpu: 0.89 deadline: 1 group: dummy task_id: 026D7FF78ADDEC098EF62A6316DD75C\n\nAfter:\n[ 1] cpu: 0.91 deadline: 2 group: dummy memory: 12.29 task_id: D759A6B6161BCE3B25C7AC79064D082\n[ 2] cpu: 0.36 deadline: 1 group: dummy memory: 47.81 task_id: F058239672AD6108DF9CFBDA74B5628\n[ 3] cpu: 0.27 deadline: 20 group: dummy memory: 99.64 task_id: 109DC14559C70AB880E2AE44588E2B6\n[ 4] cpu: 1.05 deadline: 2 group: dummy memory: 17.39 task_id: 1D55F6D4EC004FBB0D449EF3FC325A2\n[ 5] cpu: 0.45 deadline: 4 group: dummy memory: 90.99 task_id: 5FC152A187472BCB51FEC24C1B34808\n[ 6] cpu: 1.03 deadline: 4 group: dummy memory: 45.24 task_id: 3811B94C6FB3E20817FA648746EEFB7\n[ 7] cpu: 0.43 deadline: 4 group: dummy memory: 41.11 task_id: 009A7DA8A7E0643B84391C790D0562B\n[ 8] cpu: 0.74 deadline: 2 group: dummy memory: 84.72 task_id: 486E9DD50B5AE6BA4DB76CB6CCAD057\n[ 9] cpu: 0.93 deadline: 3 group: dummy memory: 82.40 task_id: 770DE1C994C61ACBAAF8C708C0A90D8\n[10] cpu: 0.89 deadline: 1 group: dummy memory: 37.67 task_id: 026D7FF78ADDEC098EF62A6316DD75C\n</code></pre></p>"},{"location":"okec/components/common/simulator/compele/","title":"simulator::complete","text":"<pre><code>auto complete(const std::string&amp; ip, response&amp;&amp; r) -&gt; void;\n</code></pre>"},{"location":"okec/components/common/simulator/compele/#parameters","title":"Parameters","text":""},{"location":"okec/components/common/simulator/compele/#return-value","title":"Return value","text":""},{"location":"okec/components/common/simulator/compele/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/compele/#example","title":"Example","text":""},{"location":"okec/components/common/simulator/hold_coro/","title":"simulator::hold_coro","text":"<pre><code>auto hold_coro(awaitable a) -&gt; void;\n</code></pre>"},{"location":"okec/components/common/simulator/is_valid/","title":"simulator::is_valid","text":"<pre><code>auto is_valid(const std::string&amp; ip) -&gt; bool;\n</code></pre>"},{"location":"okec/components/common/simulator/run/","title":"simulator::run","text":"<pre><code>auto run() -&gt; void;\n</code></pre>"},{"location":"okec/components/common/simulator/run/#parameters","title":"Parameters","text":""},{"location":"okec/components/common/simulator/run/#return-value","title":"Return value","text":""},{"location":"okec/components/common/simulator/run/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/run/#example","title":"Example","text":""},{"location":"okec/components/common/simulator/simulator/","title":"simulator::simulator","text":"<pre><code>simulator(ns3::Time time = ns3::Seconds(300));\n</code></pre>"},{"location":"okec/components/common/simulator/simulator/#parameters","title":"Parameters","text":""},{"location":"okec/components/common/simulator/simulator/#return-value","title":"Return value","text":""},{"location":"okec/components/common/simulator/simulator/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/simulator/#example","title":"Example","text":""},{"location":"okec/components/common/simulator/stop_time/","title":"simulator::stop_time","text":"<pre><code>auto stop_time(ns3::Time time) -&gt; void;\n</code></pre>"},{"location":"okec/components/common/simulator/stop_time/#parameters","title":"Parameters","text":""},{"location":"okec/components/common/simulator/stop_time/#return-value","title":"Return value","text":""},{"location":"okec/components/common/simulator/stop_time/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/stop_time/#example","title":"Example","text":""},{"location":"okec/components/common/simulator/submit/","title":"simulator::submit","text":"<pre><code>auto submit(const std::string&amp; ip, std::function&lt;void(response&amp;&amp;)&gt; fn) -&gt; void;\n</code></pre>"},{"location":"okec/components/common/simulator/submit/#parameters","title":"Parameters","text":""},{"location":"okec/components/common/simulator/submit/#return-value","title":"Return value","text":""},{"location":"okec/components/common/simulator/submit/#notes","title":"Notes","text":""},{"location":"okec/components/common/simulator/submit/#example","title":"Example","text":""},{"location":"okec/components/common/simulator/~simulator/","title":"simulator::~simulator","text":"<pre><code>~simulator();\n</code></pre>"},{"location":"okec/components/common/task/task/","title":"task::task","text":"<code>task() = default;</code> (1) <code>task(json other);</code> (2) <p>Constructs a task object.</p> <ul> <li>1) default constructor.</li> <li>2) Constructs a task object from a valid json file.</li> </ul>"},{"location":"okec/components/common/task/task/#parameters","title":"Parameters","text":"<ul> <li>other: a valid json file to copy from</li> </ul>"},{"location":"okec/components/common/task/task/#example","title":"Example","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nint main() {\n    okec::task t;\n}\n</code></pre>"},{"location":"okec/customization/decision-engines/","title":"Customizing decision engines","text":""},{"location":"okec/customization/network-models/","title":"Customizing network models","text":""},{"location":"okec/customization/resources/","title":"Customizing resources","text":""},{"location":"okec/customization/resources/#custom-okecresource","title":"Custom okec::resource","text":"<p>A single resource can be customized and retrieved using the <code>attribute()</code> and <code>get_value()</code> methods, respectively.</p> <pre><code>auto res = okec::make_resource();\nres-&gt;attribute(\"cpu\", okec::rand_range(1.2, 2.4).to_string());\n\nokec::print(\"resource cpu: {}\\n\", res-&gt;get_value(\"cpu\"));\n</code></pre> <p>However, this approach is generally not recommended. Typically, you should prefer using the <code>okec::resource_container</code> to create and initialize resources.</p>"},{"location":"okec/customization/resources/#custom-okecresource_container","title":"Custom okec::resource_container","text":"<p>As the name suggests, <code>okec::resource_container</code> is the container version of <code>okec::resource</code>. Using it to create tasks is more straightforward.</p> <pre><code>// Create 10 resources\nokec::resource_container resources(10);\nresources.initialize([](auto res) {\n    res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n});\n\nokec::print(\"{:rs}\", resources);\n</code></pre> <p>The output would be:</p> <pre><code>[ 1] cpu: 2.19 \n[ 2] cpu: 2.17 \n[ 3] cpu: 2.14 \n[ 4] cpu: 2.20 \n[ 5] cpu: 2.15 \n[ 6] cpu: 2.18 \n[ 7] cpu: 2.15 \n[ 8] cpu: 2.16 \n[ 9] cpu: 2.17 \n[10] cpu: 2.18\n</code></pre>"},{"location":"okec/customization/resources/#resource-attributes","title":"Resource attributes","text":"<p>Similar to the task type, all attributes in the resource type are customizable, and you should tailor your resource according to the specific offloading algorithms.</p> <p>Resources can encompass various device properties, such as device memory, price, resource utilization rates, disk size, and more.</p> <p>Note that the types of all attributes and values are strings.</p>"},{"location":"okec/customization/responses/","title":"Customizing responses","text":"<p>The response type is very similar to the task type. Here's an example:</p> <pre><code>// Create responses\nokec::response resp;\nresp.emplace_back({\n    { \"time_consuming\", okec::rand_value&lt;float&gt;().to_string() },\n    { \"finished\", \"Y\" }\n});\n\nokec::print(\"{:r}\", resp);\n</code></pre> <p>The output would be:</p> <pre><code>[1] finished: Y time_consuming: 0.27\n</code></pre>"},{"location":"okec/customization/tasks/","title":"Customizing tasks","text":"<p>The okec library can define tasks by setting custom attributes and values.</p>"},{"location":"okec/customization/tasks/#task-header-and-task-body","title":"Task header and task body","text":"<p>A task consists of a header and a body. The header contains various information required for task offloading, such as cpu demand, memory demand, source address, etc. The body, which is generally optional, contains the actual set of instructions. In most cases, only the task header is necessary.</p> <pre><code>okec::task t;\nt.emplace_back({\n    { \"id\", okec::task::unique_id() }\n}, {\n    { \"instructions\", \"set of instructions\" }\n});\n\nokec::print(\"{:t}\", t);\n</code></pre> <p>This will create one task with a header and a body:</p> <pre><code>[1] id: 14CD07884A6DD4685B00CC9950EDA4F instructions: set of instructions\n</code></pre> <p>You can retrieve values from the header or body using the <code>get_header()</code> and <code>get_body()</code> methods.</p> <pre><code>okec::print(\"id: {}\\n\", t[0].get_header(\"id\"));\nokec::print(\"instructions: {}\\n\", t[0].get_body(\"instructions\"));\n</code></pre> <p>The output would be:</p> <pre><code>id: 57D01B1F4802E95834B48DE31F27999\ninstructions: set of instructions\n</code></pre> <p>As you can see, a task is essentially a container holding multiple task elements. To manipulate any of these elements, you can directly use the syntax <code>[index]</code> or the method <code>at(index)</code>.</p>"},{"location":"okec/customization/tasks/#task-attributes","title":"Task attributes","text":"<p>All attributes in the task header and task body are customizable. You should tailor your task according to the specific offloading algorithms.</p> <pre><code>okec::task t;\nt.emplace_back({\n    { \"id\", okec::task::unique_id() },\n    { \"cpu\", okec::rand_range(1.2, 2.4).to_string() },\n    { \"memory\", okec::rand_range(1, 4).to_string() },\n    { \"deadline\", okec::rand_range(2, 5).to_string() },\n    { \"...\", \"...\" }\n});\n</code></pre> <p>Note that the types of all attributes and values are strings.</p>"},{"location":"okec/getting-started/formatting/","title":"Formatting Output","text":""},{"location":"okec/getting-started/formatting/#formatting-tasks","title":"Formatting tasks","text":"<p>The <code>task</code> type is formattable in the okec library. Consequently, it can be directly formatted in both the log module and the output module using the syntax <code>{:t}</code>, as demonstrated in the following example:</p> <pre><code>okec::print(\"{:t}\", t);\nolog::info(\"{:t}\", t);\n</code></pre>"},{"location":"okec/getting-started/heterogeneous-devices/","title":"Heterogeneous Devices","text":""},{"location":"okec/getting-started/heterogeneous-devices/#create-heterogeneous-devices-with-custom-resources","title":"Create heterogeneous devices with custom resources","text":"<p>In this trivial example, we create a base station connecting several edge servers. All heterogeneous devices initialize network communication using the <code>multiple_and_single_LAN_WLAN_network_model</code>. Additionally, we randomly generate some resources and install them on these edge servers.</p> <pre><code>#include &lt;okec/okec.hpp&gt;\n\n\nint main()\n{\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Print resources\n    okec::print(\"{:rs}\", resources);\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre>"},{"location":"okec/getting-started/log/","title":"Log","text":"<p>This logging module is inspired by Stargirl.</p> <pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    olog::set_level(olog::level::all);\n\n    olog::debug(\"this is a debug message\");\n    olog::info(\"this is a info message\");\n    olog::warning(\"watch out, this is a warning message\");\n    olog::success(\"oh nice, this one is success\");\n    olog::error(\"oops, this one is an error\");\n\n\n    olog::info(\"{0:-^{1}}\", \"\", okec::get_winsize().col - olog::indent_size());\n\n    // Print tasks\n    okec::task t;\n    generate_task(t, 5, \"dummy\");\n    okec::print(\"task:\\n{:t}\", t);\n\n    olog::info(\"{0:-^{1}}\", \"\", okec::get_winsize().col - olog::indent_size());\n\n    // Print resources\n    okec::resource_container resources(5);\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n        res-&gt;attribute(\"memory\", okec::rand_range(1, 4).to_string());\n    });\n    okec::print(\"resource:\\n{:rs}\", resources);\n\n    olog::info(\"{0:-^{1}}\", \"\", okec::get_winsize().col - olog::indent_size());\n}\n</code></pre> <p>Output: </p>"},{"location":"okec/getting-started/task-offloading/","title":"Task offloading","text":""},{"location":"okec/getting-started/task-offloading/#specify-the-default-offloading-strategy","title":"Specify the default offloading strategy","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog = okec::log;\n\n\nint main()\n{\n    olog::set_level(olog::level::debug);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::worst_fit_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>When your program runs, the decision engine will automatically gather resource information from all edge servers that have installed resources.</p> <pre><code>[+0.00000000s] \u2588 The decision engine received resource information from edge server(10.1.1.2).\n[+0.00000000s] \u2588 The decision engine received resource information from edge server(10.1.2.2).\n[+0.00000000s] \u2588 The decision engine received resource information from edge server(10.1.2.3).\n[+0.00000000s] \u2588 The decision engine received resource information from edge server(10.1.2.4).\n[+0.00000000s] \u2588 The decision engine received resource information from edge server(10.1.2.5).\n</code></pre>"},{"location":"okec/getting-started/task-offloading/#asynchronously-offload-your-first-set-of-tasks-using-the-worst-fit-decision-engine-with-callbacks","title":"Asynchronously offload your first set of tasks using the worst-fit decision engine with callbacks","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::worst_fit_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Offload tasks\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    auto user1 = user_devices.get_device(0);\n    user1-&gt;async_send(std::move(t));\n    user1-&gt;async_read([](auto resp) {\n        olog::success(\"received response.\");\n\n        okec::print(\"{:r}\", resp);\n    });\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre>"},{"location":"okec/getting-started/task-offloading/#asynchronously-offload-your-first-set-of-tasks-using-the-worst-fit-decision-engine-with-coroutines","title":"Asynchronously offload your first set of tasks using the worst-fit decision engine with coroutines","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nokec::awaitable offloading(auto user, okec::task t) {\n    olog::debug(\"offloading begin\");\n\n    co_await user-&gt;async_send(std::move(t));\n    auto resp = co_await user-&gt;async_read();\n    olog::success(\"received response.\");\n\n    okec::print(\"{:r}\", resp);\n}\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::worst_fit_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Offload tasks\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    auto user1 = user_devices.get_device(0);\n    co_spawn(sim, offloading(user1, t));\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>Output: </p>"},{"location":"okec/getting-started/task-offloading/#discretely-offload-the-task-using-the-dqn-decision-engine","title":"Discretely offload the task using the DQN decision engine","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::DQN_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Discretely offload the task using the DQN decision engine.\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    int episode = 5;\n    decision_engine-&gt;train(t, episode);\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>Output: </p>"},{"location":"okec/getting-started/task/","title":"Task","text":""},{"location":"okec/getting-started/task/#generate-tasks-randomly","title":"Generate tasks randomly","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    okec::print(\"{:t}\", t);\n}\n</code></pre> <p>The potential output:</p> <pre><code>[ 1] cpu: 1.02 deadline: 3 group: dummy task_id: CC5855F2FB5922492B34F37B994CD5D\n[ 2] cpu: 1.14 deadline: 4 group: dummy task_id: 13E009115B674D4A50DD60CE847DFC2\n[ 3] cpu: 0.76 deadline: 4 group: dummy task_id: 1F276AAFF89D17AAE219E987DA7998A\n[ 4] cpu: 0.34 deadline: 1 group: dummy task_id: 5D3DDEB066A080C9AC3A9B9DF752A91\n[ 5] cpu: 0.81 deadline: 2 group: dummy task_id: 3FC95B4E167FEF99957143D35D21463\n[ 6] cpu: 1.00 deadline: 4 group: dummy task_id: 82D8F41470CD15DB51D28E1D3A859AF\n[ 7] cpu: 1.03 deadline: 3 group: dummy task_id: 4273D1952CB9B0099D36904978E9B28\n[ 8] cpu: 0.74 deadline: 3 group: dummy task_id: 8A201C54390FD95BA6A467F1426048B\n[ 9] cpu: 0.29 deadline: 3 group: dummy task_id: F3FD22F2A9196DE93915ACEF0A612FA\n[10] cpu: 0.52 deadline: 4 group: dummy task_id: 072EA1D4AB870B2B15ABCC5DE036FBE\n</code></pre>"},{"location":"okec/getting-started/task/#save-tasks-and-load-them-from-files","title":"Save tasks and Load them from files","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t1;\n    generate_task(t1, 5, \"dummy\");\n    t1.save_to_file(\"task.json\");\n\n    okec::task t2;\n    t2.load_from_file(\"task.json\");\n\n    okec::print(\"t1:\\n{:t}\\n\", t1);\n    okec::print(\"t2:\\n{:t}\", t2);\n}\n</code></pre> <p>The potential output: <pre><code>t1:\n[1] cpu: 0.94 deadline: 3 group: dummy task_id: C8487480083EF6FA51A07F6786112B2\n[2] cpu: 0.87 deadline: 3 group: dummy task_id: AA6E00D9D1D676999810EC793D4091F\n[3] cpu: 0.70 deadline: 3 group: dummy task_id: D7C9B93D88725A6B0A7F24C8D5576E9\n[4] cpu: 0.27 deadline: 4 group: dummy task_id: D8A72C409FC97BD9B8C6478CD69D23A\n[5] cpu: 0.30 deadline: 3 group: dummy task_id: 05019AFC1C46E9581755D2B819B5092\n\nt2:\n[1] cpu: 0.94 deadline: 3 group: dummy task_id: C8487480083EF6FA51A07F6786112B2\n[2] cpu: 0.87 deadline: 3 group: dummy task_id: AA6E00D9D1D676999810EC793D4091F\n[3] cpu: 0.70 deadline: 3 group: dummy task_id: D7C9B93D88725A6B0A7F24C8D5576E9\n[4] cpu: 0.27 deadline: 4 group: dummy task_id: D8A72C409FC97BD9B8C6478CD69D23A\n[5] cpu: 0.30 deadline: 3 group: dummy task_id: 05019AFC1C46E9581755D2B819B5092\n</code></pre></p>"},{"location":"okec/getting-started/task/#iterate-through-tasks","title":"Iterate through tasks","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    for (auto const&amp; item : t.elements())\n    {\n        okec::print(\"task_id: {} \", item.get_header(\"task_id\"));\n        okec::print(\"group: {} \", item.get_header(\"group\"));\n        okec::print(\"cpu: {} \", item.get_header(\"cpu\"));\n        okec::print(\"deadline: {}\\n\", item.get_header(\"deadline\"));\n    }\n}\n</code></pre> <p>The potential output: <pre><code>task_id: E99E1850C94F616A2E7A2F01FEA4F43 group: dummy cpu: 1.15 deadline: 4\ntask_id: 2E54F007DCA13C89621C9D554F7203B group: dummy cpu: 1.05 deadline: 4\ntask_id: B430A892935CE16A2DD458A0E73013E group: dummy cpu: 0.46 deadline: 4\ntask_id: 8FEE0B90F2ABF3280B573C1517CF487 group: dummy cpu: 0.83 deadline: 2\ntask_id: CFAF12948696F9AA25D2EA45D99F3CC group: dummy cpu: 0.87 deadline: 4\ntask_id: B89CF926127909C91641670DCF59E16 group: dummy cpu: 0.87 deadline: 1\ntask_id: A75B4F6C8828E7B98550FA8E59232FB group: dummy cpu: 0.24 deadline: 1\ntask_id: A838D2B4E534D9E8556B7F5228A5F0D group: dummy cpu: 0.65 deadline: 4\ntask_id: 42CC12E43AEF2E9AC50C47E675050C1 group: dummy cpu: 0.77 deadline: 4\ntask_id: 5BEE99DFF8F012C9FB10DA9E81C5DF9 group: dummy cpu: 0.76 deadline: 3\n</code></pre></p>"},{"location":"okec/getting-started/task/#append-attributes-to-tasks-and-modify-the-task-attribute-values","title":"Append attributes to tasks and modify the task attribute values","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nint main()\n{\n    okec::task t;\n    generate_task(t, 10, \"dummy\");\n\n    okec::print(\"Before:\\n{:t}\\n\", t);\n\n    for (auto&amp; item : t.elements_view())\n    {\n        item.set_header(\"memory\", okec::rand_range(10.0, 100.0).to_string());\n    }\n\n    t.at(2).set_header(\"deadline\", \"20\");\n\n    okec::print(\"After:\\n{:t}\", t);\n}\n</code></pre> <p>The potential output: <pre><code>Before:\n[ 1] cpu: 0.91 deadline: 2 group: dummy task_id: D759A6B6161BCE3B25C7AC79064D082\n[ 2] cpu: 0.36 deadline: 1 group: dummy task_id: F058239672AD6108DF9CFBDA74B5628\n[ 3] cpu: 0.27 deadline: 2 group: dummy task_id: 109DC14559C70AB880E2AE44588E2B6\n[ 4] cpu: 1.05 deadline: 2 group: dummy task_id: 1D55F6D4EC004FBB0D449EF3FC325A2\n[ 5] cpu: 0.45 deadline: 4 group: dummy task_id: 5FC152A187472BCB51FEC24C1B34808\n[ 6] cpu: 1.03 deadline: 4 group: dummy task_id: 3811B94C6FB3E20817FA648746EEFB7\n[ 7] cpu: 0.43 deadline: 4 group: dummy task_id: 009A7DA8A7E0643B84391C790D0562B\n[ 8] cpu: 0.74 deadline: 2 group: dummy task_id: 486E9DD50B5AE6BA4DB76CB6CCAD057\n[ 9] cpu: 0.93 deadline: 3 group: dummy task_id: 770DE1C994C61ACBAAF8C708C0A90D8\n[10] cpu: 0.89 deadline: 1 group: dummy task_id: 026D7FF78ADDEC098EF62A6316DD75C\n\nAfter:\n[ 1] cpu: 0.91 deadline: 2 group: dummy memory: 12.29 task_id: D759A6B6161BCE3B25C7AC79064D082\n[ 2] cpu: 0.36 deadline: 1 group: dummy memory: 47.81 task_id: F058239672AD6108DF9CFBDA74B5628\n[ 3] cpu: 0.27 deadline: 20 group: dummy memory: 99.64 task_id: 109DC14559C70AB880E2AE44588E2B6\n[ 4] cpu: 1.05 deadline: 2 group: dummy memory: 17.39 task_id: 1D55F6D4EC004FBB0D449EF3FC325A2\n[ 5] cpu: 0.45 deadline: 4 group: dummy memory: 90.99 task_id: 5FC152A187472BCB51FEC24C1B34808\n[ 6] cpu: 1.03 deadline: 4 group: dummy memory: 45.24 task_id: 3811B94C6FB3E20817FA648746EEFB7\n[ 7] cpu: 0.43 deadline: 4 group: dummy memory: 41.11 task_id: 009A7DA8A7E0643B84391C790D0562B\n[ 8] cpu: 0.74 deadline: 2 group: dummy memory: 84.72 task_id: 486E9DD50B5AE6BA4DB76CB6CCAD057\n[ 9] cpu: 0.93 deadline: 3 group: dummy memory: 82.40 task_id: 770DE1C994C61ACBAAF8C708C0A90D8\n[10] cpu: 0.89 deadline: 1 group: dummy memory: 37.67 task_id: 026D7FF78ADDEC098EF62A6316DD75C\n</code></pre></p>"},{"location":"okec/getting-started/visualizer/","title":"Visualizer","text":""},{"location":"okec/getting-started/visualizer/#response-visualizer","title":"Response Visualizer","text":"<pre><code>#include &lt;okec/okec.hpp&gt;\n\nnamespace olog =  okec::log;\n\nvoid generate_task(okec::task&amp; t, int number, std::string const&amp; group)\n{\n    for (auto i = number; i-- &gt; 0;)\n    {\n        t.emplace_back({\n            { \"task_id\", okec::task::get_unique_id() },\n            { \"group\", group },\n            { \"cpu\", okec::rand_range(0.2, 1.2).to_string() },\n            { \"deadline\", okec::rand_range(1, 5).to_string() },\n        });\n    }\n}\n\nokec::awaitable offloading(auto user, okec::task t) {\n    std::vector&lt;int&gt; x_points(t.size());\n    std::ranges::iota(x_points, 1);\n\n    co_await user-&gt;async_send(std::move(t));\n    auto resp = co_await user-&gt;async_read();\n    olog::success(\"received response.\");\n\n    okec::print(\"{:r}\", resp);\n    double finished = 0;\n    std::vector&lt;double&gt; time_points;\n    for (const auto&amp; item : resp.data()) {\n        if (item[\"finished\"] == \"Y\") {\n            finished++;\n            time_points.push_back(TO_DOUBLE(item[\"time_consuming\"]));\n        }\n    }\n\n    auto total_time = std::accumulate(time_points.begin(), time_points.end(), .0);\n    okec::print(\"Task completion rate: {:2.0f}%\\n\", finished / resp.size() * 100);\n    okec::print(\"Total processing time: {:.6f}\\n\", total_time);\n    okec::print(\"Average processing time: {:.6f}\\n\", total_time / time_points.size());\n\n    okec::draw(x_points, time_points, \"Tasks\", \"Processing Time(Seconds)\");\n}\n\nint main()\n{\n    olog::set_level(olog::level::all);\n    okec::simulator sim;\n\n    // Create 1 base station\n    okec::base_station_container base_stations(sim, 1);\n    // Create 5 edge servers\n    okec::edge_device_container edge_servers(sim, 5);\n    // Create 2 user devices\n    okec::client_device_container user_devices(sim, 2);\n\n    // Connect the base stations and edge servers\n    base_stations.connect_device(edge_servers);\n\n    // Set the network model for every device\n    okec::multiple_and_single_LAN_WLAN_network_model model;\n    okec::network_initializer(model, user_devices, base_stations.get(0));\n\n    // Initialize the resources for each edge server.\n    okec::resource_container resources(edge_servers.size());\n    resources.initialize([](auto res) {\n        res-&gt;attribute(\"cpu\", okec::rand_range(2.1, 2.2).to_string());\n    });\n\n    // Install each resource on each edge server.\n    edge_servers.install_resources(resources);\n\n    // Specify the default offloading strategy\n    auto decision_engine = std::make_shared&lt;okec::worst_fit_decision_engine&gt;(&amp;user_devices, &amp;base_stations);\n    decision_engine-&gt;initialize();\n\n\n    // Offload tasks\n    okec::task t;\n    generate_task(t, 5, \"1st\");\n    auto user1 = user_devices.get_device(0);\n    co_spawn(sim, offloading(user1, t));\n\n\n    // Run the simulator\n    sim.run();\n}\n</code></pre> <p>Output:  </p>"}]}